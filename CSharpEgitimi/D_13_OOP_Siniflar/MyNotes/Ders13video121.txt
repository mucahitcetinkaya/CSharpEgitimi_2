

Bölüm 13 OOP Sýnýflar VÝDEO 121 Sýnýf Tanýmlama ve inceleme - 1


        #region VÝDEO 121

        static void Main(string[] args)
        {

            /*
             
            Bölüm 13 OOP Sýnýflar VÝDEO 121 Sýnýf Tanýmlama ve inceleme - 1
             
            */

            /*
            
            biz ne demiþtik ilk derslere baslamadan once

             
            namespace D_13_OOP_Siniflar
            {
                internal class Program
                {

                    static void Main(string[] args)
                    {
                        Console.WriteLine("Merhaba Dünya");
                    }

                }
            }

            biz eðitime Console.WriteLine("Merhaba Dünya"); dan basladýk
            tipleri gördük
            farklý kullanýmlarý gördük operatörler vs
            bir üste cýktýk metotlarý gördük
            bir üste cýkýp class larý gördük
            sonrada bu class lara baglý ama burda gozukmeyen seylerý de goreceðiz

            biz metotlarý görmeden once de metotlarý kullandýgýmýzý söylemiþtik
            biz aslýnda merhaba dunya yazarken de aslýnda class larý kullandýk
            class ý degýl class larý kullandýk
            Program class ý ve console class ýný kullandýk
            c# .net framework yüzde yüz bir nesne yönelimli programlama dilidir.

            mesela string in üzerine gidip F12 e basarsam veya sag týk go to definition týklarsak
            string in detayýný görürüz ve string in de bir class oldugunu görürüz
            aslýnda beným metýn sakladýgým degiskenýmýn tipi bile aslýnda bir class
            yuzde yuz nesne yonelimli ifadesini tam olarak burda alýyor

            ozel olarak yazýlmýs bir class ýn sistem içerisinde 
            nasýl tanýmlanabildiðini inceleyelim

            bir class olusturalým
            ekleyecegýmýz projeye sag týk add class a týklayýp isim vererek bir class olusturalým
            Musteri121 class ýný olusturduk 121. video dayýz
            ekledýgýmýz yerde .cs dosyasý olarak olustugunu görürsünüz
            
            böyle yapmayýp yani farklý bir class acmak yerine ama boylesi daha iyi tabiki
            kullandýgýn yerdeki scop aralýgýndan cýkarak farklý bir class olusturabilirsin
            mesela bizim su anda kullandýgýmýz 
            class Program
            {

            }

            bunun scop un dan cýkarak baska bir class da yazabilirsin

            bir namespace birden fazla classý barýndarabilir bu bir uzaydý bundan bahsetmiþtik

            Musteri121 class ýna bakýn ayný namespace de ler

            bu sekildeki kullanýmlar pek tavsiye edilmiyor kodun okunaklýgý acýsýndan

            bizim class larýmýz namespace in altýnda durur en ust seviye class larý barýndýrýr
            class lar metotlarý barýndýrýr
            metotlar iþleri yapar

            Musteri121 class ýna gidip orda iþlemler yapalým - 1. not
            1. not bitiþinden geldik

            orda yapýlan degýsýklerý burda görmeye calýsalým 
            Musteri class ýmýzý cagýralým

            once olusturdugumuz class ý yazýyoruz
            sonra bunu sistem içinde cagýrabileceðimiz bir isim gerekiyor onu yazýyoruz
            sonra da new anahtar kelimesi ile tekrar class ýmýzý yazýp new leme yapmýs oluyoruz
            sistemde bunun ornegýný olusturuyoruz
            ram tarafýný tekrar anlatacagýz
            parantezlere constructor diyoruz bunu da ileride görecegiz yapýcý metot
            program ilk calýstýgýnda calýsan kýsým
            yani telefonumuz var elimize aldýk su anda 
            içindeki özelliklere (property lere) ulasabiliriz

            þimdi M1. dedýgýmde bu tanýmlara ozelliklere ulasabilmemiz gerekiyor
            M1 demek benim için Musteri121 demek oluyor
            M1. dedýgýmýzde nesnenýn içindeki tanýmlara ulasabilmemiz gerekiyor
            ama M1. dedýgýmýz de birþey cýkmýyor
            cýkmama sebebini ogrenmek için tekrar Musteri121 class ýmýza gidelim
            neyi eksik yaptýk ona bakalým

            2. not için Musteri121 e gidelim
            2. not bitiþten geldik

            3. not baslangýc
            TcKimlikNumarasi ni public yaptýk
            M1. dediðimizde bu alan field olarak geliyor tooltype kýsmýnda cýkýyor
            eriþim belirleyicisini public yapýnca dýþ dünyaya acmýs olduk
            digerlerini de public yapmamýz lazým
            ne zaman gerekmez 

            Musteri class ý içinde olusturdugumuz bir alaný yine musteri içerisindeki metotlarýn
            birisinde kullanýyor ve bunu dýs dünyaya acmaya gerek duymuyorsak
            bunu private olarak býrakabiliriz
            dýs dunyada bir musteri nesnesi olusacagý zaman fieldlarýmýzý 
            public olarak iþaretlemeliyiz
            gidip diger alanlarý da public yapalým
            3. not bitiþ
            3. not bitiþten geldik

            diger alanlarý da public yaptýk burda dolduralým


            þimdi biz uygulamýmýzý calýstýrdýgýmýz da ram üzerinde nesnemiz nasýl sekillenecek
            ram üzerinde nasýl bir yapýya bürünüyor
            bunlara bakacagýz

            */

            //// 1. not 
            //Musteri121 M1 = new Musteri121();

            //// 2. not 
            //Musteri121 M1 = new Musteri121();
            //M1.Selam();

            //Musteri121.Selam();

            //// 3. not 
            Musteri121 M1 = new Musteri121();
            M1.TcKimlikNumarasi = "12345678910";
            M1.isim = "Mücahit";
            M1.soyIsim = "Çetikaya";
            M1.cinsiyet = 717770001;

        }

        /*
         
        class Musteri121Programcs
        {

        }

        */

        #endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace D_13_OOP_Siniflar
{

    ////1. not hali 

    //class Musteri121
    //{
    //    string TcKimlikNumarasi;
    //    string isim;
    //    string soyIsim;
    //    int cinsiyet;
    //}


    //// 2. not hali
    //class Musteri121
    //{
    //    public string TcKimlikNumarasi;
    //    string isim;
    //    string soyIsim;
    //    int cinsiyet;

    //    public void Selam1()
    //    {
    //        Console.WriteLine("metotu gormek için yazdým sadece");
    //    }

    //    public static void Selam2()
    //    {
    //        Console.WriteLine("static farký new lemeye gerek kalmýyor direk class ismi ile cagýrabiliyorsun");
    //    }
    //}

    // 3. not hali
    public class Musteri121
    {
        public string TcKimlikNumarasi;
        public string isim;
        public string soyIsim;
        public int cinsiyet;

    }


}


/*
 
her yerden ulaþabilmek için public yapýyoruz

Program.cs den geldik - 1 . not

burda ne saklamak istiyoruz musterimizin temel ihtiyaclarýný saklamak istiyoruz
bunlar neydi hatýrlayalim

tc kimlik numarasý
isim
soyisim
cinsiyet

ben bu bilgileri tutmak istiyorum
peki ben bilgileri neyin içinde tutabilirim
deðiþkenlerin içinde tutmam lazým

demek ki beným bu isimlerde ve bunlarýn isimlerine uygun 
veri tiplerinde degiskenler tanýmlamam lazým
 

        cinsiyetin int olmasýnýn sebebi mesela örnek olarak 
        7177770001 girilirse Bay
        7177770002 girilirse Bayan
        bunu neden boyle yaptýk sonra deðineceðiz
      
taným olarak musteri class ýmýz tamam gibi gözüküyor
program cs e donelim ve neler yapabiliriz bunlara bakalým

1 . not bitiþi

2. not baslangýc

M1. dedýgýmýzde Program.cs e buradaki ozelliklere ulasamýyoruz
bunun sebebi class ýn olusturuldugunda 
eriþim belirleyicilerinin uygun olarak ayarlanmamýs olmasý
diger taraftan gormek için
class ýmýzýdaki alanlarý public olarak degistirelim

public olunca genele acýk oluyor 
private olunca kendý içinde kullanabiliyoruz

class tanýmlarýmýz da da bu böyle 
class ýmýzý ve içerisindeki field larýmýzý 
public dersek dýs dunyaya acabiliyoruz
private dersek class ýn içerisinde kullanabiliyoruz

o zaman yazdýgýmýz ozellikleri de public olarak yazalým
sadece TcKimlikNumarasi ný public yapalým o gozuksun digerleri gozukmesin
kolay yazmak için
prop tab tab yazdýgýnda kolay olarak property olusturabilirsin

baslarýna public yazýp program.cs de M1. dediðimizde bunlara artýk ulasabiliriz

program.cs e bakalým gözüküyor mu

burdan sonraki notlar da ben metot denemesi yaptým

classs ýcýndeki olusturalan ozelliklere property deniyor genel isim olarak
bunlarýn her birine de program içinde field deniyor
mesela M1. dedýgýmýzde yanýnda tooltype olarak field yazdýgýný gorursun

metotlar turuncu bir küp olarak gözüküyor tooltype olarak

2. not bitiþ

3. not baslangýc

diger alanlarý da public yapalým
diger alanlarda public oldu
artýk herhangi bir yerden bunlara eriþebiliriz
class ýmýzý da public olarak degistirelim
program.cs e geri gidip diger alanlarý da dolduralým

3. not bitiþ







*/