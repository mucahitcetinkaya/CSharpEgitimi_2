

Bölüm 21: Generic Koleksiyonlar
Video 170 Generic mimariden önce tip güvenli listeler ile çalışmak


        #region VİDEO 170 Generic mimariden önce tip güvenli listeler ile çalışmak

        static void Main(string[] args)
        {

            /*

                Bolum 21 Generic Koleksiyonlar V170 Generic mimariden önce tip güvenli listeler ile çalışmak

            */

            /*
            
            1. not baslangıc

            bu bölümde genericleri yani şablon tipleri inceliyor olacagız

            geceric mimari .net 2.0 ile birlikte geldi 
            genericten önce olusturmus oldugumuz arraylist lerimizi koleksiyonlarımızın içindeki degerleri tip güvenli yapabilmek için yani sadece istemiş oldugumuz tiplerin koleksiyon içerisinde barınabilmesi için 
            farklı bir yol izliyorduk generic mimariden sonra bunların hiç birine gerek kalmadı yazılım tarafında daha fazla esnekliğe kavusmus olduk 

            generic mimari nedir anlatmadan önce genericten önce 1.0 daki generic gibi kodlama yapabilmek için neler yaptıgımızdan bahsetmek istiyorum 
            nerden nereye geldik

            generic mimari ile birlikte koleksiyonları inceleyeceğiz
            generic mimariyi detaylı inceleyeceğiz
            koleksyionlar 
            class lar 
            metotlar 
            interface ler 
            kalıtımsal generic bolumlerını gordukten sonra ornek uygulama ve odevlerle devam edeceğiz 

            bu bolumden sonra generic mimariyi yogun kullanıp bunun üzerinde bişeyler ogrenmeye baslayacagız 

            genericten once biz neler yapıyorduk

            bir arraylist olusturalım newleyelim

            1. not bitiş
            
            2. not baslangıc

            ArrayList liste = new ArrayList();
            liste.Add();

            arraylist ler system.collection kütüphanesinde bulunan 
            içerisinde object ten deger tasıyan 
            bir koleksiyondu
            object tipinden veri kabul ettiği için .net framework teki her veri tipini buraya ekleyebiliyordum

            benım isteğim olusturmus oldugum koleksiyonuma sadece int girilebilsin sadece decimal girilebilsin
            yada benım olusturmus oldugum custom class larım burda eklenebilsin

            bunların cozumu için arraylist imizi baska bir class içinde saklayıp içine datayı metotlar ile giriyoduk 

            sanal bir db lazım bize SanalDatabase class ını olusturalım oraya gideli

            2. not bitiş

            3. not bitiş sanaldatabase den geldik

            4. not baslangıc

            sanaldatabase i newleyelim

            V170SanalDatabase S1 = new V170SanalDatabase();
            S1.YeniKayit(1);

            s1.yenikayit ile içeriye int deger atatık 

            içeriye arraylist imizi saklayarak dısarıyada metotlar acarak istemiş oldugumuz veri tiplerimiz ile arraylist mizi besleyebiliyorduk 
            generic gelmeeden önce 

            generic geldi ne oldu 

            generic koleksiyonlar geldi 
            class ın metotun interface in generic davranışları gelişti yeni bir davranıs sekli geldi bize esneklik sundu 

            sıradaki derse gecelim
             
            */

            // 2. not baslangıc
            //ArrayList liste = new ArrayList();
            //liste.Add();

            // 4. not baslangıc

            V170SanalDatabase S1 = new V170SanalDatabase();
            S1.YeniKayit(1);



        }

        #endregion

        --------------------------------------------------------------

        
using System.Collections;

namespace Bolum_21_Generic_Koleksiyonlar
{
    public class V170SanalDatabase
    {

        private ArrayList listem;

        public V170SanalDatabase()
        {
            listem = new ArrayList();
        }

        public void YeniKayit(int data)
        { 
            listem.Add(data); 
        }

    }
}

/*
 
2. not bitiş program.cs den geldik

3. not baslangıc

public yaptık

private bir arraylist olusturalım
arraylist olusturduk sadece new leme işini yapıcı metotta yaptım ki her zaman metot calısında otomatik new lensin diye
 
 
namespace Bolum_21_Generic_Koleksiyonlar
{
    public class V170SanalDatabase
    {

        private ArrayList listem;

        public V170SanalDatabase()
        {
            listem = new ArrayList();
        }

    }
}

içeriye deger kabul edelim
deger int veri tipine sahip olsun 
bunun için bir metot olusturalım

namespace Bolum_21_Generic_Koleksiyonlar
{
    public class V170SanalDatabase
    {

        private ArrayList listem;

        public V170SanalDatabase()
        {
            listem = new ArrayList();
        }

        public void YeniKayit(int data)
        { 
            listem.Add(data); 
        }

    }
}

public disarıya acık
void geriye dönmeyecek
int data => int olan bir deger alacak adı data
listem.Add ile data yı ekleyecek

bu sekilde arraylist ime istemiş oldugum zorunlu kosmus oldugum veri tipini alabildim
benim listem arraylist yenikayit metotunu kullarak int veri tiplerini alabilir 

program.cs e gidip new leyelim

3. not bitiş

*/