

Bölüm 12 Metot VİDEO 114 Parametrelerde ref ve out anahtar sözcüklerinin kullanımı

            Heap ve Stack Kavramı

            bunlar ram üzerinde olan 2 alanımız
            stack alanında value alanımız yer alıyor
            int byte short double gibi
            heap alanında daha komplesk karmasık olanlar class larımız yer alıyor

            örnek olarak
            int a = 5; int tipinde a adında 
            bir değişken olusturdugumuz da 
            ram de olanlar 
            stack de bir alan olusturuluyor container olusturulur
            buna a adını veriyor içine 5 degerini atıyor
            ve sonra baska bir degısken olusturup içine a yı atalım
            int b = a;
            stack alanında yeniden b için bir alan olusturulur ve içine 5 degeri atılır

            heap alanında ise
            User sınıfından u1 adında bir nesne olusturduk new ledik yani
            User u1 = new User();

            bunu yazdıgımız da heap alanında bir alan olusuyor

            User tipini ve u1 ini heap alanında tutuyoruz
            ama
            stack alanında bir referans ediniyoruz bunu uygulama kendısı veriyor
            bu referans heap alanındaki alanı işaret ediyor
            bir nesne olustugunda olusan heap alanındaki yeri ifade ediyor

            sonra da User dan bir nesne daha olusturalım ama new keyword unu kullanmayalım
            u2 içine u1 i attık 
            User u2 = u1;
            tekrar bir nesne üretmedik sadece içine atma işlemi oldu

            bu sefer stack alanında yine u2 alanı olustu ama
            heap alanında aynı alanı gösteriyor

            baska bir videonun notları
            bunlar ram üzerinde olan 2 alanımız
            stack alanında value alanımız yer alıyor stack = deger tipi
            sbyte byte short ushort int uint long ulong
            float double decimal bool char enum struct
            bunlardan birisi varsa değer tipi kullanıyoruz demektir.

            diziler classlar referans tiplidir
            heap alanında daha komplesk karmasık olanlar class larımız yer alıyor

            int sayi1 = 1;
            int sayi2 = sayi1;

            dediğimiz de stack alanında 2 tane alan acılır sayi1 ve sayi2 nin değeri 1 olur

            sayi2 = 2; dersek sayi2 2 olarak guncellenir

            referans tipliler

            bir dizi olusturalım

            var dizi1 = new int[] {1,2}; burda new leme var heap giriyor işin içine
            degisken adı dizi1 stackte tutulurken değerleri heap kısmında tutulur

            var dizi2 = dizi1; yazdıgımızda stack alanında dizi2 acılır ama heap kısmında aynı yeri işaret eder
            bir alan referans numarası verdiğimiz için referans tipli diyoruz
            heap alanında bulundugu alanında bir kodunu atıyor kendisi burayı göster diye
            tek bir yerden herkes faydalanabiliyor



            /*
            
            Bölüm 12 Metot VİDEO 114 Parametrelerde ref ve out anahtar sözcüklerinin kullanımı
             
            */

            /*
            
            Ref ve Out anahtar sözcüklerinde eski .net framework versiyonlarında 1 fark vardı
            mevcut framework sürümü 7.0 olanlar bu farktan etkilenmeyecektir.
             
            bir metot yazarak işlemlerimize baslayalım

            hoca bir videodan bahsediyor ama öyle bir video yoktu netten arastırdım bende ne nedir diye

            notlarda yazıyor

            stack ve heap yapılarından bahsetmıs ama videosu yok
            stack bolumunde bir int degisken olusturup içerisine bir deger atayıp bunun bir deger tipli bir davranıs oldugunu
            heap bolumunde ise referans durdugunu ortak yerlere bakan yerler olarak söz etmiş

            kodun anlatımı

            stack de sayi1 degiskenı olustu içinde 0 var 
            sonra bir metot olusturduk parametre verdik 

            DegerAtaRef metoduna ref ile degerini aktarırken
            gelenDeger adında bir degisken daha olustu
            degeri 0 olarak
            buda normal sartlarda stack bolgede olusması gerekiyordu fakat
            biz orda ref kullandıgımız için heap bolgede olustu

            standart davranıslarında ikiside degisken oldugu için
            stack bölgede olusmaları ve üzerlerindeki degerleri 0 olması gerekiyordu
            biz ref ile parametreye değeri aktardıgımız için
            bizim ref anahtar sozcugumuz bunları deger tipi davranıstan cıkarttılar
            ikisinin de ortak olarak heap bolgede degeri görmesini sagladı

            ref ve out anahtar sozcukleri aslında deger tipli davranısa sahip olan
            değişkenlerin referans tipli degisken olmasına olanak saglıyor

            sayi1 0 ken gelenDeger 10 
            bunları ref ile birbirine atadıgımız da 
            aynı yere bakacakları için
            sayi1 de 10 oluyor


            aralarındaki fark eger ben degiskenın içerisinde ref ile işaretlenmiş bir degisken ataması yapacaksam
            metodu cağırıp degisken atamasını yapacagım noktada 
            int sayi1 = 0; yani burda 
            atamak istediğim degiskenın refte bir deger alması gerekiyordu
            out kullanımında ise deger almazsa hata veriyordu

            yani 7 den oncesınde
            int sayi1;
            DegerAtaOut(out sayi1);

            static void DegerAtaOut(out int gelenDeger)
            {
                gelenDeger = 10;
            }
            boyle bir tanım yapsaydık
            hata veriyordu artık bu hata ortadan kalktı

            framework 7.0 dan sonra ref veya out degiskenler deger alıp almasa da bişey farketmiyor

            bu anahtar kelimeler onemlı 
            uygulamarın içerisinde cok sık kullanmasakta bazı noktalarda degiskenın butunlugunu bozmamak için
            ilgili degiskenın bir kopyasını olusturmak yerine degiskenı takip etmek için
            ref ve out anahtar sozcuklerınden faydanalıyoruz

            
            */

            int sayi1 = 0;

            DegerAtaRef(ref sayi1);




        }

        static void DegerAtaRef(ref int gelenDeger)
        {
            gelenDeger = 10;
        }

        static void DegerAtaOut(out int gelenDeger)
        {
            gelenDeger = 10;
        }
