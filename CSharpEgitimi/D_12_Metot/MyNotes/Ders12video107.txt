

Bölüm 12 Metot VİDEO 107 Yeni Bir Metot Tanımlamak


  #region VİDEO 107

        static void Main(string[] args)
        {

            /*

            Bölüm 12 Metot VİDEO 107 Yeni Bir Metot Tanımlamak

            */

            /*

            106. video da sadece Ogrenci class ını olusturup bir tane metot olusturduk
            107. video da bunu geliştirelim
            detaylarına inelim
            nerele ihtiyacımız var 
            hangi ihtiyacımızı karsılamak için nasıl bir tanım yapmamız lazım

             Ogrenci Class ından devam edelim

            Ogrenci class ından geldik
            newleme yapmamız lazım

            Ogrenci107 O2 = new Ogrenci107();
            02.OgrenciMetot( yazınca tooltype ler cıkıyor 
            Ogrenci107 clasının içinde bir metot bu
            diger tarafta verdiğimiz parametre istemesi void geriye dönüş olmasın vs hepsi orda ornek olarak yazıyor

            O2.OgrenciMetot("Mücahit", "Çetinkaya");

            sırayla parametreleri verince verilen parametre daha kalın yazıyor

            Ogrenci107 e breakpoint bırakalım f11 ile debug yapalım

            Ogrenci107 nesnesini new ledi bunun acıklaması class işlerken detaylı yapılacak
            O2. uzerınden OgrenciMetot metoduna gidecek giderken parametre götürüyor
            f11 ile devam edince Ogrenci107 e geçiyor scoplara düşüyor
            oradaki parametrelere bakınca bilgileri tasıdıgını görürürüz
            kodu okuyup buraya geri dönüyor

            Ogrenci107 deki metotun erişim belirleyicisini private yapalım ne olacak bakalım

            OgrenciMetot kısmında hata yazdı 
            tekrar O2. yazıp ulasmaya calısalım 
            OgrenciMetot gözükmüyor private oldugu için sadece olustugu kısımda kullanılmaya izni var 

            private bir metot hazırlayıp aynı class içinde kontrol edelim

            Ogrenci107 classına gidelim

            Ogrenci107den geldik

            OgrenciMetot3 public 
            OgrenciMetot2 private
            public içinde private metot cagırdık burda da onu tetiklemiş olduk

            debug
            nesne olustu nesne uzerınden metota gitti metot içindeki kodu calıstırdı
            ordada baska nesne var private ama aynı yerdeler onu da ordan calıstırdı
            tekrar metot3 e geldi kodu bitirdi buraya geldi tamamen bitirmiş oldu

            */

            Ogrenci107 O2 = new Ogrenci107();
            O2.OgrenciMetot1("Mücahit", "Çetinkaya");


            O2.OgrenciMetot3();

        }

        #endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace D_12_Metot
{
    public class Ogrenci107
    {

        public void OgrenciMetot1(string ogrenciAdi, string ogrenciSoyadi)
        {
            Console.WriteLine("Öğrenci Bilgileri : {0} {1}" , ogrenciAdi , ogrenciSoyadi);
        }
        private void OgrenciMetot2(string ogrenciAdi, string ogrenciSoyadi)
        {
            Console.WriteLine("Öğrenci Bilgileri : {0} {1}", ogrenciAdi, ogrenciSoyadi);
        }
        public void OgrenciMetot3()
        {
            OgrenciMetot2("Mücahit","Çetinkaya");
        }

    }
}



/*
 
Bölüm 12 Metot VİDEO 107
öncelikle bizim metotlarımızın

Metot yazarken olması gerekenler

[ErişimBelirleyicisi] <GeriDönüşDeğeri> MetotAdı()
{
    metotun calısması için gereken kodlar
}

mevcut metot işlem yapmaya baslarken kendısını cagıran noktadan herhangi bir parametre alıp
parametre uzerınde işlem yapacaksa parantezler içine parametreler yazılır
işlem yapılmayacaksa parametre yollanmaz
daha sonrada metot içindeki scop içine
yani metotun body si de denir buna işlemler buraya yazılır


[ErişimBelirleyicisi] <GeriDönüşDeğeri> MetotAdı(Parametreler)
{
    metotun calısması için gereken kodlar
}


Erişim Belirleyicisi Nedir ??

5 farklı erişim belirleyicisi bulunmaktadır.

Public Private Protected Internal InternalProtected

Public 
Ben metotuma sadece class ın içinden degil classıma ulasan herkesinde buna ulasmasına izin veriyorum demektir.

Private
metot sadece içerisinde bulunan class duzeyinde cagırabilir 
yani private bir metot nerde olusturulduysa orda kullanılır
Ogrenci classına ulasabilir ama metoda ulasamaz
metoda ulasmak için metotun olustugu yerde işlem yapmak gerekir

Protected
Kalıtım konusunda yoğun olarak işleyeceğiz
Birbirinden nesneler kalıtıldıgında Protected kullanılabilir.

Internal
İlgili kutuphane içerisinde ulaşabilirsin

InternalProtected
Uygulama içerisinde veya kalıtıldıysa ulasabilirsin diyoruz

bu kısımda sadece public ve private kısımlarına giriyoruz
diğer kısımları Polymorphism kalıtım konularında göreceğiz

şimdi bir metot tanımı yapalım 
classın dısarısından erişilmesini istiyorum
class ıma ulasan herkes metotumu görebilsin
erişim belirleyicisi public olacak
geri dönüşü olmayacak void olacak
parametre alsın ogrenciAdi ogrenciSoyadi

public void OgrenciMetot(string ogrenciAdi, string ogrenciSoyadi)
        {
            Console.WriteLine("Öğrenci Bilgileri : {0} {1}" , ogrenciAdi , ogrenciSoyadi);
        }

Program.cs e gidelim bu metotu cagıralım

Program.cs den geldik

        private void OgrenciMetot2(string ogrenciAdi, string ogrenciSoyadi)
        {
            Console.WriteLine("Öğrenci Bilgileri : {0} {1}", ogrenciAdi, ogrenciSoyadi);
        }
        public void OgrenciMetot3()
        {
            OgrenciMetot2("Mücahit","Çetinkaya");
        }

private oldugu halde aynı class içinde oldugundan cagırma yapabildik.

OgrenciMetot2 private OgrenciMetot3 public

OgrenciMetot3 içinde 2 yi cagırdık oldu aynı yerde oldukları için
peki 3 de public oldugu için diger class da cagırsak

Program.cs e gidelim

*/